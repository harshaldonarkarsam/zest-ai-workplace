// docs/swagger.yaml
openapi: 3.0.0
info:
  title: ZestHR API
  description: |-
    ZestHR AI-powered Human Resources Management System API. 
    This API provides access to HR management features with a focus on AI-enhanced capabilities.
  version: 1.0.0
  contact:
    email: support@zesthr.com
servers:
  - url: http://localhost:3000/api
    description: Local development server
  - url: https://api.zesthr.com/api
    description: Production API server
tags:
  - name: Authentication
    description: User authentication and management
  - name: Employees
    description: Employee management operations
  - name: Recruitment
    description: Recruitment and hiring operations
  - name: Performance
    description: Performance management operations
  - name: Attendance
    description: Time and attendance operations
  - name: Learning
    description: Learning and development operations
  - name: Analytics
    description: HR analytics and reporting

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Error message
        error:
          type: string
          example: Detailed error message (dev only)
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            token:
              type: string
            user:
              type: object
              properties:
                id:
                  type: integer
                email:
                  type: string
                username:
                  type: string
                roles:
                  type: array
                  items:
                    type: string
                employee:
                  type: object
                  properties:
                    id:
                      type: integer
                    employee_id:
                      type: string
                    first_name:
                      type: string
                    last_name:
                      type: string
                    position:
                      type: string
                    department:
                      type: string
        message:
          type: string
          example: Login successful
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
    EmployeeResponse:
      type: object
      properties:
        id:
          type: integer
        employee_id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        date_of_birth:
          type: string
          format: date
        gender:
          type: string
          enum: [MALE, FEMALE, NON_BINARY, OTHER, PREFER_NOT_TO_SAY]
        national_id:
          type: string
        marital_status:
          type: string
          enum: [SINGLE, MARRIED, DIVORCED, WIDOWED, OTHER]
        joined_date:
          type: string
          format: date-time
        employment_status:
          type: string
          enum: [ACTIVE, ONBOARDING, ONLEAVE, SUSPENDED, TERMINATED, OFFBOARDING]
        department:
          type: string
        position:
          type: string
        manager_name:
          type: string
    JobRequisitionResponse:
      type: object
      properties:
        id:
          type: integer
        requisition_id:
          type: string
        title:
          type: string
        department_name:
          type: string
        position_title:
          type: string
        hiring_manager_name:
          type: string
        description:
          type: string
        vacancies:
          type: integer
        priority:
          type: string
        status:
          type: string
        target_date:
          type: string
          format: date
        skills_required:
          type: object
        qualifications:
          type: object
        employment_type:
          type: string
        created_at:
          type: string
          format: date-time
    CandidateMatchResponse:
      type: object
      properties:
        candidateId:
          type: string
        jobRequisitionId:
          type: integer
        skillMatch:
          type: number
          format: float
        experienceRelevance:
          type: number
          format: float
        semanticMatch:
          type: number
          format: float
        overallScore:
          type: number
          format: float
        insights:
          type: array
          items:
            type: string
        flags:
          type: array
          items:
            type: string
        matchDetails:
          type: object
          properties:
            requiredSkills:
              type: object
            preferredSkills:
              type: object

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate a user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                  message:
                    type: string
                    example: User registered successfully
        '400':
          description: Registration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Get the current user's profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /employees:
    get:
      tags:
        - Employees
      summary: Get all employees
      description: Get a paginated list of employees with optional filtering
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          description: Filter by employment status
          schema:
            type: string
        - name: department
          in: query
          description: Filter by department ID
          schema:
            type: integer
        - name: search
          in: query
          description: Search by name or employee ID
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmployeeResponse'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      tags:
        - Employees
      summary: Create a new employee
      description: Create a new employee record
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - first_name
                - last_name
                - user_id
                - joined_date
                - employment_status
              properties:
                employee_id:
                  type: string
                  description: If not provided, a unique ID will be generated
                user_id:
                  type: integer
                first_name:
                  type: string
                last_name:
                  type: string
                date_of_birth:
                  type: string
                  format: date
                gender:
                  type: string
                  enum: [MALE, FEMALE, NON_BINARY, OTHER, PREFER_NOT_TO_SAY]
                national_id:
                  type: string
                marital_status:
                  type: string
                  enum: [SINGLE, MARRIED, DIVORCED, WIDOWED, OTHER]
                joined_date:
                  type: string
                  format: date
                employment_status:
                  type: string
                  enum: [ACTIVE, ONBOARDING, ONLEAVE, SUSPENDED, TERMINATED, OFFBOARDING]
                emergency_contact:
                  type: object
                contact_details:
                  type: object
      responses:
        '201':
          description: Employee created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/EmployeeResponse'
                  message:
                    type: string
                    example: Employee created successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /employees/{id}: